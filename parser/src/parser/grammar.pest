module = { SOI ~ (module_doc)* ~ (import | alias)* ~ EOI }

alias = { line_doc* ~ attribute* ~ name ~ "=" ~ descriptor }

name = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

// Descriptors

descriptor = @{
    (WHITESPACE | COMMENT)*
    ~ "|"?
    ~ (WHITESPACE | COMMENT)*
    ~ descriptor_inner
    ~ ((WHITESPACE | COMMENT)* ~ "|" ~ (WHITESPACE | COMMENT)* ~ descriptor_inner)*
}

// NOTE: Order matters! prefer structural containers before inline imports
// to avoid ambiguity when parsing nested descriptors (e.g. arrays).
descriptor_inner = !{ literal | primitive | branded | any | object | array | tuple | record | inline_import | alias | name }

primitive = { primitive_index | "null" }

primitive_index = ${ "string" | primitive_numeric | "boolean" }

primitive_numeric = ${ "number" | "int" | "i8" | "i16" | "i32" | "i64" | "i128" | "isize" | "u8" | "u16" | "u32" | "u64" | "u128" | "usize" | "float" | "f32" | "f64" }

any = { "any" }

// Literals

literal = { literal_string | literal_float | literal_integer | literal_boolean }

literal_string = ${ quote ~ string_inner ~ quote }

quote = _{ "\"" }

string_inner = @{ (!("\"" | "\\") ~ ANY)* ~ (string_escape ~ string_inner)? }

string_escape  = @{ "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t" | string_unicode) }

string_unicode = @{ "u" ~ ASCII_HEX_DIGIT{4} }

literal_integer = @{ ("+" | "-")? ~ integer }

literal_float = @{ ("+" | "-")? ~ integer ~ ("." ~ digits ~ exponent? | exponent) }

integer =  @{ "0" | (ASCII_NONZERO_DIGIT ~ digits?) }

digits = @{ (ASCII_DIGIT | ("_" ~ ASCII_DIGIT))+ }

exponent = @{ ("E" | "e") ~ ("+" | "-")? ~ ASCII_DIGIT+ }

literal_boolean = ${ "true" | "false" }

// Branded

branded = ${ "@" ~ primitive }

// Objects

object = { "{" ~ properties? ~ "}" }

properties = _{ any_property ~ (","? ~ any_property)* ~ ","? }

any_property = _{ extension_property | optional_property | required_property }

extension_property = { "..." ~ name }

required_property = { line_doc* ~ attribute* ~ name ~ ":" ~ descriptor }

optional_property = { line_doc* ~ name ~ "?:" ~ descriptor }

// Attributes

attribute = { "#[" ~ name ~ attribute_descriptor? ~ "]" }

attribute_descriptor = { attribute_assignment | attribute_arguments | attribute_properties }

attribute_assignment = { "=" ~ attribute_value }

attribute_arguments = { "(" ~ (attribute_value ~ ("," ~ attribute_value)*)? ~ ")" }

attribute_properties = { "(" ~ attribute_property ~ ("," ~ attribute_property)* ~ ")" }

attribute_property = { name ~ "=" ~ attribute_value }

attribute_value = { literal | name }

// Arrays

array = { "[" ~ descriptor ~ "]" }

// Tuples

tuple = { "(" ~ descriptor ~ ("," ~ descriptor)* ~ ")" }

// Records

record = { "{" ~ record_key ~ ":" ~ descriptor ~ "}" }

record_key = { "[" ~ primitive_index? ~ "]" }

// Modules

import = { "use" ~ import_reference }

import_reference = ${ path ~ (import_glob | import_names | name) }

import_names = !{ "{" ~ (import_name ~ ("," ~ import_name)*)? ~ "}" }

import_name = { name ~ ("as" ~ name)? }

import_glob = ${ "*" }

inline_import = @{ path ~ name }

path = @{ path_segment+ }

path_segment = ${ "../" | "./" | ((!"/" ~ !NEWLINE ~ ANY)+ ~ "/") }

// Comments

line_comment = _{ ("//" ~ !("/" | "!") ~ (!NEWLINE ~ ANY)*) }

block_comment = _{ "/*" ~ (block_comment | !"*/" ~ ANY)* ~ "*/" }

module_doc = ${ "//!" ~ SPACE? ~ doc }

line_doc = ${ "///" ~ SPACE? ~ doc }

doc = @{ (!NEWLINE ~ ANY)* }

// Base

SPACE = _{ " " | "\t" }

WHITESPACE = _{ SPACE | NEWLINE }

COMMENT = _{ line_comment | block_comment }
