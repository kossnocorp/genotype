//! Welcome to Genotype language guide. It's designed to help you get started
//! with the language by providing a quick yet comprehensive overview of its
//! features.
//!
//! Genotype is a meta type language that allows you to describe your
//! application data structures and generate code for the languages you use.
//!
//! It's the most valuable if you work with multiple languages that work with
//! the same data structures.
//!
//! It's based on JSON data types which limits the complexity and enables you
//! to translate it to other languages efficiently without losing any
//! information.
//!
//! It's inspired by JSON Typedef (JTD) and inherits most of its features and
//! expands on it. If you used it before, you will find Genotype very familiar.
//!
//! Without further ado, let's dive into the language.

// You define a structure by specifying its name followed by a block of
// properties. It corresponds to an interface in TypeScript, struct in Rust,
// C#, or properties form in JTD.
Structure = {
  // Properties are defined by the property name and its type:
  text: string

  // Basic primitive types include string, boolean, number and float:
  flag: boolean
  num: number // Represents 64-bit integer
  pi: float   // Represents 64-bit floating point number
}

// You might already noticed that comments in Genotype are defined by //.
// Module-level doc comments starts with //!.

/// Structures can also be annoted with doc comments.
User = {
  /// As well as properties.
  name: string

  /// User's age.
  age: /* Btw you can also use block comments too. */ number
}

// Doc comments will translate to TSDoc in TypeScript, doc comments in Rust,
// etc. and show up in your editor.

// Now, let's get back to the types.

More = {
  // Types can be defined nullable by adding a question mark:
  prop: string?
  // This is equivalent to `string | null` in TypeScript and `Option<String>`
  // in Rust.

  // Properties also can be defined as optional:
  optional?: string
  // The difference from nullable type is that the property might not appear
  // in the data at all.

  // Properties can refer other types:
  structure: Structure

  // ... nested structures:
  nested: {
    hello: string

    // ... or even be recursive:
    more: More
  }

  // Nested properties can be named:
  anotherNested: AnotherNested = {
    hello: string
  }

  // Arrays are defined by wrapping into square brackets:
  list: [string]

  // Tuples are defined by listing types in parentheses:
  tuple: (string, number)
}

// You can write properties on the same line delimited by a comma:
User = { name: string, age: number }

// Enums are defined by listing all possible values:
Color = "red" | "green" | "blue"
Day = 0 | 1 | 2 | 3 | 4 | 5 | 6

// You can define type aliases:
List = [string]
Age = number

// ...it will translate to simple type alias in TypeScript and newtype in Rust. 
// [TODO] Replace in Rust?

// [TODO] Add opaque type that translate to newtype in Rust and branded string
// in TypeScript?

// Record/HashMap can be defined by [TODO]
UserMap = { []: User }

// By default the value is a string, but you can specify the type:
UserMap = { [number]: User }
// You can use string, number and float as keys.

User = {
  name: string
  #[validate: "email"]
  email: string
}

// You can tag a structure:

Comment = {
  #type: "comment"
}

// You can reuse properties from other structures:
Content = {
  text: string
}

Post = {
  ...Content
  title: string
}

Comment = {
  ...Content
  user: User
}

// [TODO] enum

// [TODO] This can't translate to TypeScript
State = {
  Pending
  Active(ActivePayload)
  Failed(string)
  Finished(string)
}

ActivePayload = {
  startedAt: string
}

// [TODO] Granular integer and float types:
//
// f32: f32   // 32-bit floating point number
// f64: f64   // 64-bit floating point number
// i8: i8     // 8-bit signed integer
// u8: u8     // 8-bit unsigned integer
// i16: i16   // 16-bit signed integer
// u16: u16   // 16-bit unsigned integer
// i32: i32   // 32-bit signed integer
// u32: u32   // 32-bit unsigned integer
// i64: i64   // 64-bit signed integer
// u64: u64   // 64-bit unsigned integer
// i128: i128 // 128-bit signed integer
// u128: u128 // 128-bit unsigned integer