{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Genotype",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#declarations"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.genotype",
          "match": "(//).*$",
          "captures": {
            "1": {
              "name": "punctuation.definition.comment.genotype"
            }
          }
        },
        {
          "name": "comment.line.documentation.genotype",
          "match": "(///).*$",
          "captures": {
            "1": {
              "name": "punctuation.definition.comment.documentation.genotype"
            }
          }
        },
        {
          "name": "comment.line.documentation.genotype",
          "match": "(//!).*$",
          "captures": {
            "1": {
              "name": "punctuation.definition.comment.documentation.genotype"
            }
          }
        },
        {
          "name": "comment.block.genotype",
          "begin": "/\\*",
          "end": "\\*/",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.genotype"
            }
          }
        }
      ]
    },
    "declarations": {
      "patterns": [
        {
          "include": "#type-declaration"
        },
        {
          "include": "#enum-declaration"
        },
        {
          "include": "#type-alias-declaration"
        }
      ]
    },
    "type-declaration": {
      "name": "meta.type.declaration.genotype",
      "begin": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(=)\\s*\\{",
      "beginCaptures": {
        "1": {
          "name": "entity.name.type.genotype"
        },
        "2": {
          "name": "keyword.operator.assignment.genotype"
        }
      },
      "end": "\\}",
      "patterns": [
        {
          "include": "#type-members"
        }
      ]
    },
    "type-members": {
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#field-declaration"
        },
        {
          "include": "#tag-declaration"
        }
      ]
    },
    "field-declaration": {
      "name": "meta.field.declaration.genotype",
      "begin": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(\\??):?\\s*",
      "beginCaptures": {
        "1": {
          "name": "variable.object.property.genotype"
        },
        "2": {
          "name": "keyword.operator.optional.genotype"
        }
      },
      "end": "(?=,|\\}|$)|(?<=\\S)(?=\\s*(//))",
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#type-annotation"
        }
      ]
    },
    "tag-declaration": {
      "match": "(#type)\\s*:\\s*(\"[^\"]*\")",
      "captures": {
        "1": {
          "name": "keyword.other.tag.genotype"
        },
        "2": {
          "name": "string.quoted.double.genotype"
        }
      }
    },
    "type-annotation": {
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#primitive-types"
        },
        {
          "include": "#array-type"
        },
        {
          "include": "#tuple-type"
        },
        {
          "include": "#record-type"
        },
        {
          "include": "#type-reference"
        },
        {
          "include": "#nested-type"
        }
      ]
    },
    "primitive-types": {
      "name": "support.type.primitive.genotype",
      "match": "\\b(string|boolean|number|float)\\b\\??"
    },
    "array-type": {
      "name": "meta.type.array.genotype",
      "begin": "\\[",
      "end": "\\]",
      "patterns": [
        {
          "include": "#type-annotation"
        }
      ]
    },
    "tuple-type": {
      "begin": "\\(",
      "end": "\\)",
      "patterns": [
        {
          "include": "#type-annotation"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "record-type": {
      "begin": "\\{\\s*\\[",
      "end": "\\]\\s*\\}",
      "patterns": [
        {
          "include": "#primitive-types"
        }
      ]
    },
    "type-reference": {
      "name": "entity.name.type.genotype",
      "match": "[_$[:alpha:]][_$[:alnum:]]*\\??"
    },
    "nested-type": {
      "begin": "\\{",
      "end": "\\}",
      "patterns": [
        {
          "include": "#type-members"
        }
      ]
    },
    "enum-declaration": {
      "name": "meta.enum.declaration.genotype",
      "begin": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(=)\\s*",
      "beginCaptures": {
        "1": {
          "name": "entity.name.type.enum.genotype"
        },
        "2": {
          "name": "keyword.operator.assignment.genotype"
        }
      },
      "end": "(?=\\n)",
      "patterns": [
        {
          "include": "#enum-members"
        }
      ]
    },
    "enum-members": {
      "patterns": [
        {
          "match": "(\"[^\"]*\")\\s*(\\|)",
          "captures": {
            "1": {
              "name": "string.quoted.double.genotype"
            },
            "2": {
              "name": "keyword.operator.type.genotype"
            }
          }
        },
        {
          "match": "\\b([0-9]+)\\s*(\\|)",
          "captures": {
            "1": {
              "name": "constant.numeric.genotype"
            },
            "2": {
              "name": "keyword.operator.type.genotype"
            }
          }
        },
        {
          "match": "(\"[^\"]*\")",
          "name": "string.quoted.double.genotype"
        },
        {
          "match": "\\b([0-9]+)\\b",
          "name": "constant.numeric.genotype"
        }
      ]
    },
    "type-alias-declaration": {
      "name": "meta.type.alias.genotype",
      "begin": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(=)\\s*",
      "beginCaptures": {
        "1": {
          "name": "entity.name.type.alias.genotype"
        },
        "2": {
          "name": "keyword.operator.assignment.genotype"
        }
      },
      "end": "(?=$|\\n|//)",
      "patterns": [
        {
          "include": "#type-annotation"
        }
      ]
    },
    "punctuation-comma": {
      "name": "punctuation.separator.comma.genotype",
      "match": ","
    }
  },
  "scopeName": "source.genotype"
}
