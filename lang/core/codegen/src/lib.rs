use genotype_lang_core_tree::{import::GTLImport, indent::GTIndent};
use genotype_parser::{GTAlias, GTDescriptor};
use miette::Result;

/// Codegen trait for target languages.
pub trait GtlCodegen {
    /// Returns the indentation struct for code generation.
    fn indent() -> GTIndent<'static> {
        GTIndent::start("  ")
    }

    /// Generates code for a descriptor node.
    fn gen_descriptor(descriptor: &GTDescriptor) -> Result<GtlCodegenResultDescriptor>;

    /// Generates code for an alias node.
    fn gen_alias(alias: &GTAlias) -> Result<GtlCodegenResultAlias>;
}

/// Codegen result enum.
pub enum GtlCodegenResult {
    /// Descriptor codegen result.
    Descriptor(GtlCodegenResultDescriptor),
    /// Alias codegen result.
    Alias(GtlCodegenResultAlias),
}

/// Descriptor codegen result.
#[derive(Debug, PartialEq)]
pub struct GtlCodegenResultDescriptor {
    /// Source code representation of a descriptor.
    pub inline: String,
    /// Definitions source code that shall be appended to the root level. It might be empty string.
    pub definitions: String,
    /// Codegen resolve containing the information to embed the generated code.
    pub resolve: GtlCodegenResolve,
}

/// Alias codegen result.
#[derive(Debug, PartialEq)]
pub struct GtlCodegenResultAlias {
    /// Definitions source code that shall be appended to the root level.
    pub definitions: String,
    /// Codegen resolve containing the information to embed the generated code.
    pub resolve: GtlCodegenResolve,
}

/// Codegen result resolve. It contains the relevant information to embed the generated code.
#[derive(Debug, PartialEq)]
pub struct GtlCodegenResolve {
    /// Imports generated by the input node.
    pub imports: Vec<Box<dyn GTLImport>>,
    /// Names claimed by the input node.
    pub claims: Vec<String>,
}
